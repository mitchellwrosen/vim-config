" TODO
" figure out why vim-cool + fzf is broken in neovim

call plug#begin(stdpath('data') . '/plugged')

Plug 'RRethy/vim-illuminate'                           " Highlight occurrences of the word under the cursor
Plug 'Yggdroot/indentLine'                             " show markers every 2 columns of leading whitespace
Plug 'godlygeek/tabular'                               " Align on words
Plug 'itchyny/lightline.vim'                           "
Plug 'junegunn/fzf.vim'                                " Fuzzy search source code, files, etc
Plug 'liuchengxu/vim-which-key'                        " thingy to tell me my own hotkeys (requires manual work)
Plug 'mcchrish/nnn.vim'                                " File browser thingy, kinda sucks, what's better?
Plug 'mengelbrecht/lightline-bufferline'               "
Plug 'mhinz/vim-startify'                              " Startup screen
Plug 'morhetz/gruvbox'                                 " best color scheme
" Plug 'neoclide/coc.nvim', { 'branch': 'release' }                   "
Plug 'neovim/nvim-lsp'
Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' } "
Plug 'psliwka/vim-smoothie'                            " Smooth paging up and down
Plug 'rhysd/git-messenger.vim'                         " git blame the line under the cursor
Plug 'romainl/vim-cool'                                " Automatically unhighlight when cursor moves
Plug 'romainl/vim-qf'                                  " Vim quickfix improvements
Plug 'sdiehl/vim-ormolu', { 'for': 'haskell' }         "
Plug 'terryma/vim-multiple-cursors'                    " Multiple cursors for quick and dirty renaming
Plug 'tommcdo/vim-exchange'                            " Swap the location of two selections
Plug 'tpope/vim-characterize'                          " Improved 'ga'
Plug 'tpope/vim-commentary'                            " Quick (un-)commenting
Plug 'tpope/vim-fugitive'                              "
Plug 'tpope/vim-repeat'                                " Make '.' repeat more things out of the box
Plug 'tpope/vim-surround'                              " Some surround helpers
Plug 'unblevable/quick-scope'                          " Highlight characters for f, F, t, T

" Plug 'ElmCast/elm-vim', { 'for': 'elm' }
" Plug 'LnL7/vim-nix', { 'for': 'nix' }
" Plug 'purescript-contrib/purescript-vim', { 'for': 'purescript' }
" Plug 'vmchale/dhall-vim', { 'for': 'dhall' }

" Cool stuff in here but it defines way too many bindings for me and it
" doesn't seem easy to disable them all and customize the ones I do want
" Plug 'wellle/targets.vim'

" Bad performance
" Plug 'mhinz/vim-signify'

call plug#end() " Automatically calls syntax on, filetype plugin indent on

augroup mitchellwrosen
  autocmd!
augroup END

" ==============================================================================
" Basic settings
" ==============================================================================

colo gruvbox

set autowriteall
set clipboard=unnamed,unnamedplus    " yank also copies to both clipboards
set cursorline                       " higlight the current line
set expandtab                        " convert tabs to spaces
set grepprg=rg\ --vimgrep            " use rg to grep
set hidden                           " don't abandon out-of-sight buffers
set ignorecase                       " case-insensitive searching
set inccommand=split                 " show live command substitutions
set lazyredraw                       " don't draw during e.g. applying a macro
set linebreak                        " wrap lines in a more visually pleasing way
set listchars=tab:>\ ,trail:Â·,nbsp:+ " trailing whitespace markers
set list                             " show trailing whitespace, tabs, etc.
set nofoldenable                     " never fold
set nojoinspaces                     " insert one space after ., ?, ! chars when joining
set nomodeline                       " disable modelines
set noshowmode                       " don't show mode, since lightline handle that
set nostartofline                    " don't jump cursor to start of line when moving
set number                           " show line number gutter
set report=0                         " always repeat the number of lines changed
set scrolloff=10                     " start scrolling before the cursor reaches the edge
set shiftround                       " shift to multiple of shiftwidth
set shiftwidth=2                     "
set sidescrolloff=16                 " start scrolling before the cursor reaches the edge
set signcolumn=yes                   " always draw signcolumn because it's jarring when it appears otherwise
set smartcase                        " don't ignore case if search contains uppercase char
set smartindent                      " smart autoindenting when starting a new line
set synmaxcol=180                    " dont bother syntax-highlighting past this column
set showtabline=2                    " always show the tabline
set softtabstop=2                    " tab key makes 2 spaces
set termguicolors                    "
set title                            " put filename in window title
set timeoutlen=200                   " only wait this many ms for key sequence to complete
set undofile                         " persist undo history across buffer exits
set updatetime=100                   " fire CursorHold after 100ms (default 4000ms)
set wildmenu                         " complete commands with a little menu
set wildmode=list:longest,full       " wild menu completion behavior

" ==============================================================================
" Key mappings
" ==============================================================================

noremap ; :
noremap : ;
nnoremap r; r:
nnoremap r: r;
inoremap ; :
inoremap : ;
cnoremap : ;
cnoremap ; :

" make ' jump back to mark's exact position, not just line
nnoremap ' `

" very magic mode search
nnoremap / /\v
vnoremap / /\v

" Don't highlight matches *and* jump at the same time; only highlight
nnoremap * *``
nnoremap # #``

" Wean myself off tab for now...
nnoremap <Tab> <Nop>

" Backspace to switch to the previously edited buffer
nnoremap <BS> <C-^>

" Prevent the cursor from jumping past a wrapped line when moving up and down
nnoremap j gj
nnoremap k gk

" HJKL to move around the file. JK are put in the vim-smoothie plugin section.
vnoremap J <C-D>
vnoremap K <C-U>
nnoremap H ^
nnoremap L $
onoremap H ^
onoremap L $
vnoremap H ^
vnoremap L g_

" Make Y yank to the end of line, similar to how C and D behave
nnoremap Y y$
" After visual mode yank, leave cursor at the end of the highlight
" This gives me two ways to yank after making a selection: y and Y
vnoremap Y y`]

" Select last changed or yanked area
nnoremap <expr> gV '`[' . strpart(getregtype(), 0, 1) . '`]'

" U to redo. <C-r> comes from some plugin, maybe vim-repeat? (annoying)
nnoremap U <C-r>
" Weaning myself of <C-R> to redo
nnoremap <C-r> <Nop>

" Refactor word under cursor
nnoremap c* /\<<C-r>=expand('<cWORD>')<CR>\>\C<CR>``cgn
nnoremap c# ?\<<C-r>=expand('<cWORD>')<CR>\>\C<CR>``cgN

" Center after every search movement
nnoremap n nzz
nnoremap N Nzz
vnoremap n nzz
vnoremap N Nzz

" q to quit the current buffer, or quit vim if there's only 1 listed buffer
nnoremap <expr> <silent> q len(getbufinfo({'buflisted': 1})) ==? 1 ? ":q\<CR>" : ":bd\<CR>"

" Disable annoying command search 'q:' that I never use
" nnoremap q: <Nop>

" ,q to record a macro
nnoremap ,q q

" Q to apply macro recorded into q
nnoremap Q @q

" Make *, # work in visual mode, too
function! s:visualSearch(cmdtype, ...)
  let temp = @"
  normal! gvy
  if !a:0 || a:1 != 'raw'
    let @" = escape(@", a:cmdtype.'\*')
  endif
  let @/ = substitute(@", '\n', '\\n', 'g')
  let @/ = substitute(@/, '\[', '\\[', 'g')
  let @/ = substitute(@/, '\~', '\\~', 'g')
  let @/ = substitute(@/, '\.', '\\.', 'g')
  let @" = temp
endfunction
vnoremap * :<C-u>call <SID>visualSearch('/')<CR>/<C-r>=@/<CR><CR>``
vnoremap # :<C-u>call <SID>visualSearch('?')<CR>?<C-r>=@/<CR><CR>``

" Follow >>/<< shifted text around with the cursor
nmap >> <Plug>MyNmapLl
nmap << <Plug>MyNmapHh
" Get it to repeat with '.'
nnoremap <silent> <Plug>MyNmapLl >>ll:call repeat#set("\<Plug>MyNmapLl")<CR>
nnoremap <silent> <Plug>MyNmapHh <<hh:call repeat#set("\<Plug>MyNmapHh")<CR>

" ,j to join (since J moves down)
nnoremap ,j m`J``

" inner/around line text objects
vnoremap <silent> al $o0
onoremap <silent> al :<C-u>normal val<CR>
vnoremap <silent> il g_o^
onoremap <silent> il :<C-u>normal vil<CR>

" inner/around number text objects (with forward-seeking behavior)
" 123 123.456 0b1010 0xff
let s:number_regex = '0b[01]\+\|0x\x\+\|\d\+\(\.\d\+\)\='
function! s:innerNumberTextObject()
  if (!search(s:number_regex, 'ceW'))
    return
  endif
  normal! v
  call search(s:number_regex, 'bcW')
endfunction
function! s:aroundNumberTextObject()
  if (!search(s:number_regex, 'ceW'))
    return
  endif
  call search('\%' . (virtcol('.')+1) . 'v\s*', 'ceW')
  normal! v
  call search(s:number_regex, 'cb')
  call search('\s*\%' . virtcol('.') . 'v', 'bW')
endfunction
vnoremap <silent> in :<C-u>call <SID>innerNumberTextObject()<cr>
onoremap <silent> in :<C-u>call <SID>innerNumberTextObject()<cr>
xnoremap <silent> an :<C-u>call <SID>aroundNumberTextObject()<cr>
onoremap <silent> an :<C-u>call <SID>aroundNumberTextObject()<cr>

" Ctrl+S to search-and-replace in the file
nnoremap <C-s> :%s/\v//cg<Left><Left><Left><Left>
vnoremap <C-s> :s/\v//cg<Left><Left><Left><Left>

" Move buffers with Ctrl+jk
nnoremap <silent> <C-j> :bn<CR>
nnoremap <silent> <C-k> :bp<CR>

" Move vertical splits with Ctrl+hl
" I never use vertical splits anyway so these should be repurposed.
" nnoremap <C-h> <C-w>h
" nnoremap <C-l> <C-w>l

" github.com/mitchellwrosen/repld stuff
nnoremap <silent> <Space>s m`vip<Esc>:silent '<,'>w !repld-send --no-echo<CR>``
nnoremap <silent> <Space>S m`:silent w !repld-send<CR>``
vnoremap <silent> <Space>s m`<Esc>:silent '<,'>w !repld-send<CR>``

" <C-v> to paste from * register
inoremap <C-v> <C-r>*

" Ctrl+space for omnicomplete
imap <C-Space> <C-x><C-o>

" Command mode movement
cnoremap <C-h> <Left>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-l> <Right>

" Hm... can't figure out how to "fall through" to normal tab (autocomplete)
" behavior
" function! s:commandModeTab() abort
"   if getcmdtype() ==# '/' || getcmdtype() ==# '?'
"     return "\<Enter>/\<C-r>/"
"   else
"     return "\<Tab>"
"   endif
" endfunction
" function! s:commandModeShiftTab() abort
"   if getcmdtype() ==# '/' || getcmdtype() ==# '?'
"     return "\<Enter>?\<C-r>/"
"   else
"     return "\<S-Tab>"
"   endif
" endfunction
" cnoremap <expr> <Tab> <SID>commandModeTab()
" cnoremap <expr> <S-Tab> <SID>commandModeShiftTab()

" When a popup menu is visible, move thru it with tab and select with enter
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : coc#refresh()
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"

inoremap <C-u> <Nop>

lua <<EOF
local nvim_lsp = require'nvim_lsp'
local configs = require'nvim_lsp/configs'
configs.ghcide = {
  default_config = {
    cmd = { 'ghcide-wrapper', '--lsp' };
    filetypes = { 'haskell' };
    root_dir = nvim_lsp.util.root_pattern(".git", "cabal.project", "stack.yaml");
    settings = {};
  };
};
nvim_lsp.ghcide.setup{}
EOF

function! s:getSelectedText() abort
  let [l:lnum1, l:col1] = getpos("'<")[1:2]
  let [l:lnum2, l:col2] = getpos("'>")[1:2]
  if &selection ==# 'exclusive'
    let l:col2 -= 1
  endif
  let l:lines = getline(l:lnum1, l:lnum2)
  let l:lines[-1] = l:lines[-1][:l:col2 - 1]
  let l:lines[0] = l:lines[0][l:col1 - 1:]
  return l:lines
endfunction

" function! <SID>EchoQuickFixEntry()
"   let entries = getqflist()
"   let bufnr = bufnr('%')
"   let lnum = line('.')
"   for e in entries
"     if e.bufnr == bufnr && e.lnum == lnum
"       echo e.text
"       return
"     endif
"   endfor
" endfunction

let s:mitchell_term_bufid = v:null
let s:mitchell_term_jobid = v:null
let s:mitchell_term_winid = v:null

let s:mitchell_term_opts = {}
function! s:mitchell_term_opts.on_exit(jobid, data, event) abort
  " If the terminal process exits before the buffer, close the buffer, too
  if bufexists(s:mitchell_term_bufid)
    execute 'bw!' s:mitchell_term_bufid
  endif
  let s:mitchell_term_jobid = v:null
endfunction

function! MitchellTerm()
  " We're in the terminal, so toggling it would require knowing some other
  " window to jump to. Too much work.
  if nvim_get_current_buf() ==# s:mitchell_term_bufid
    return

  " Terminal window exists (even though it might be showing some other buffer)
  elseif s:mitchell_term_winid !=# v:null && winbufnr(s:mitchell_term_winid) !=# -1
    call nvim_win_close(s:mitchell_term_winid, v:false)

  else
    " let editableWidth = s:GetEditableWidth()
    let opts = {}
    " let opts.col = 120 + winwidth(0) - editableWidth
    let opts.col = winwidth(0) - 80
    let opts.height = line('w$') - line('w0') + 1
    let opts.relative = 'editor'
    let opts.row = 1
    let opts.style = 'minimal'
    " let opts.width = editableWidth - 120
    let opts.width = 80

    " Terminal window doesn't exist, but terminal buffer does
    if bufexists(s:mitchell_term_bufid)
      let s:mitchell_term_winid = nvim_open_win(s:mitchell_term_bufid, v:false, opts)

    " Neither terminal window nor buffer exist
    else
      let s:mitchell_term_bufid = nvim_create_buf(v:false, v:true)
      let winid = nvim_get_current_win()
      let s:mitchell_term_winid = nvim_open_win(s:mitchell_term_bufid, v:true, opts)
      let s:mitchell_term_jobid = termopen(&shell, s:mitchell_term_opts)
      stopinsert " because of my autocmd that starts insert when a term is opened
      call nvim_win_set_option(s:mitchell_term_winid, 'winbl', 20)
      call win_gotoid(winid)
    endif
  endif
endfunction

" Compute the width of the editable part of the screen
function! s:GetEditableWidth()
  redir => x
    exe "sil sign place buffer=" . nvim_get_current_buf()
  redir end
  let signlist = split(x, '\n')
  return winwidth(0) - ((&number || &relativenumber) ? &numberwidth : 0) - &foldcolumn - (len(signlist) > 1 ? 2 : 0)
endfunction

function! s:MitchellTermSendSelection() abort
  if s:mitchell_term_jobid !=# v:null
    let lines = s:getSelectedText()
    return chansend(s:mitchell_term_jobid, lines + [""])
  else
    return 0
  endif
endfunction

command! -range MitchellTermSendSelection call s:MitchellTermSendSelection()

nnoremap <silent> <Space>tt :call MitchellTerm()<CR>
nnoremap <silent> <Space>ts m`vip<Esc>:'<,'>MitchellTermSendSelection<CR>``
vnoremap <silent> <Space>ts :MitchellTermSendSelection<CR>

" Disallow edits to read-only files
autocmd mitchellwrosen BufReadPost * let &l:modifiable = !&readonly

" Jump to last cursor position on file open
function! s:jumpToLastPosition() abort
  if empty(&buftype) && index(['diff', 'gitcommit'], &filetype, 0, v:true) == -1
    if line("'\"") >= 1 && line("'\"") <= line('$')
      execute 'normal! g`"'
    endif
  endif
endfunction
autocmd mitchellwrosen BufWinEnter ?* call s:jumpToLastPosition()

" Strip trailing whitespace on save
function! s:stripTrailingWhitespace() abort
  if &l:modifiable && !&l:binary
    let l:view = winsaveview()
      try
        keeppatterns silent! 1,$s/\s\+$//e
      finally
        call winrestview(l:view)
      endtry
  endif
endfunction
autocmd mitchellwrosen BufWritePre * call s:stripTrailingWhitespace()

" kick in autoread on cursor hold or focus gained
autocmd CursorHold,FocusGained ?* if getcmdwintype() == '' | checktime | endif

" On <Enter>, go to error and close quickfix list
autocmd mitchellwrosen FileType qf nnoremap <silent> <buffer> <CR> <CR>:ccl<CR>

autocmd mitchellwrosen FileType unison setlocal commentstring=--\ %s

" Esc escapes terminal mode
autocmd mitchellwrosen TermOpen * tnoremap <buffer> <Esc> <C-\><C-n>
autocmd mitchellwrosen TermOpen * setlocal nonumber norelativenumber
" forcibly exit a terminal buffer, because there's nothing to save
autocmd mitchellwrosen TermOpen * nnoremap <silent> <buffer> <Space>d :bw!<CR>
" start a terminal in insert mode
autocmd mitchellwrosen TermOpen * startinsert

" Briefly highlight yanks
autocmd mitchellwrosen TextYankPost * silent! lua vim.highlight.on_yank {higroup="Visual", timeout=600}

" Save the buffer after changing it
function! s:save() abort
  if empty(&buftype) && !empty(bufname('')) && &filetype !=# 'gitcommit'
    let yank0 = getpos("'[")
    let yank1 = getpos("']")
    silent! update
    call setpos("'[", yank0)
    call setpos("']", yank1)
  endif
endfunction
autocmd mitchellwrosen InsertLeave,TextChanged * call s:save()

" Highlight merge conflict markers
match ErrorMsg '^\(<\||\|=\|>\)\{7\}\([^=].\+\)\?$'

" Highlight characters after 120th column
match ErrorMsg '\%>120v.\+'

" Echo the quickfix entry on the current line, if any
" autocmd CursorMoved * call <SID>EchoQuickFixEntry()

" ==============================================================================
" Plugin settings
" ==============================================================================

" [ElmCast/elm-vim]
let g:elm_setup_keybindings = 0 " Don't make any key mappings
let g:elm_format_autosave = 1 " Run elm-format on save

" [godlygeek/tabular]
" Space-a to align on the word under the cursor
nnoremap <silent> <Space>a m`:exe "Tabularize /" . expand("<cWORD>")<CR>``

" [junegunn/fzf.vim]
" If the buffer is already open in another tab or window, jump to it rather
" than replace the current buffer (which would open 2 copies)
let g:fzf_buffers_jump = 1
let g:fzf_layout = { 'window': { 'height': 0.9, 'width': 0.9 } }

" [junegunn/fzf.vim]
" Space-o ("open") to fuzzy file search, both git- and everything-variants
nnoremap <expr> <Space>o (len(system('git rev-parse')) ? ':Files' : ':GFiles')."\<CR>"
" Space-f ("find") the word under the cursor
nnoremap <Space>f :Rg <C-r><C-w><CR>
" Would be nice to do this without yanking?
vnoremap <Space>f y:Rg <C-r>"<CR>
" Space-k (because it's a home-row key) to fuzzy-search buffers
nnoremap <Space>k :Buffers<CR>
" Space-h to see the git history of the current file
nnoremap <Space>h :BCommits<CR>

command! -bar BCommits call fzf#vim#buffer_commits(1)

command! -bar -nargs=? -complete=buffer Buffers
  \ call fzf#vim#buffers(
  \   <q-args>,
  \   fzf#vim#with_preview({'options': ['--info=inline', '--layout=reverse']}, 'down:60%'),
  \   0)

command! -nargs=? -complete=dir Files
  \ call fzf#vim#files(
  \   <q-args>,
  \   fzf#vim#with_preview({'options': ['--info=inline', '--layout=reverse']}, 'down:60%'),
  \   0)

command! -nargs=? GFiles
  \ call fzf#vim#gitfiles(
  \   <q-args>,
  \   fzf#vim#with_preview({'options': ['--info=inline', '--layout=reverse']}, 'down:60%'),
  \   0)

" Would be nice if '-1' worked here https://github.com/junegunn/fzf/issues/1750
" function! <SID>Rg(query)
"   let command_fmt = 'rg --column --line-number --no-heading --color=always -- %s || true'
"   let initial_command = printf(command_fmt, shellescape(a:query))
"   let reload_command = printf(command_fmt, '{q}')
"   let spec = {'options': ['-0', '-1', '--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
"   call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), 1)
" endfunction
" command! -nargs=* Rg call <SID>Rg(<q-args>)

command! -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always -- '.shellescape(<q-args>),
  \   1,
  \   fzf#vim#with_preview({'options': ['--border', '--info=inline', '--layout=reverse']}, 'down:60%'),
  \   0)

command! -nargs=* Rgu
  \ call fzf#vim#grep(
  \   'rg --line-number --multiline --multiline-dotall --no-heading --color=always -- '.shellescape(<q-args>),
  \   0,
  \   fzf#vim#with_preview({'options': ['--border', '--info=inline', '--layout=reverse']}, 'down:60%'),
  \   0)

autocmd mitchellwrosen FileType fzf setlocal laststatus=0
  \| autocmd BufLeave <buffer> setlocal laststatus=2
" Escape to quit little annoying temporary buffers
autocmd mitchellwrosen FileType fzf nnoremap <silent> <buffer> <Esc> :q<CR>
" Unmap Esc quitting terminal mode, so fzf handles it (result: one Esc closes fzf)
autocmd mitchellwrosen FileType fzf tunmap <buffer> <Esc>

autocmd mitchellwrosen FileType haskell setlocal omnifunc=v:lua.vim.lsp.omnifunc
" <Space>ff to find-function (ag can match over multiple lines)
" <Space>ft to find-type (ripgrep is faster)
autocmd mitchellwrosen FileType haskell nnoremap <buffer> <Space>ff :Ag (<Bslash>b)<C-r><C-w><Bslash>b[ <Bslash>t<Bslash>n]+::<CR>
autocmd mitchellwrosen FileType haskell nnoremap <buffer> <Space>ft :Rg (((data<Bar>newtype<Bar>type)\s+)<Bar>class .*)\b<C-r><C-w>\b<CR>
autocmd mitchellwrosen FileType haskell nnoremap <buffer> <Space>fa :Rgu (<C-r><C-w>\b\s+::)<Bar>((data(\sfamily)?<Bar>newtype<Bar>type(\sfamily)?)\s+<C-r><C-w>\b)<Bar>(class\s+(\(.*\)\s+=>\s+)?<C-r><C-w>\b\s+where)<CR>

" [itchyny/lightline.vim]
function! LightlineFilename()
  let filename = expand('%:t')
  let modified = &modified ? '+' : ''
  return filename . modified
endfunction

let g:lightline = {}
let g:lightline.active = {}
let g:lightline.active.left = [ [ 'mode', 'paste' ], [ 'branch' ] ]
let g:lightline.active.right = [ [ 'lineinfo' ], [ 'percent' ], [ 'filetype' ] ]
let g:lightline.colorscheme = 'gruvbox'
let g:lightline.component_expand = {}
let g:lightline.component_expand.buffers = 'lightline#bufferline#buffers'
let g:lightline.component_function = {}
let g:lightline.component_function.branch = 'FugitiveHead'
let g:lightline.component_function.filename = 'LightlineFilename'
let g:lightline.component_type = {}
let g:lightline.component_type.buffers = 'tabsel'
let g:lightline.mode_map = {
      \ 'c': 'ð¸â´ððð¶ðð¹',
      \ 'i': 'ð¾ððâ¯ðð',
      \ 'n': 'ðâ´ððð¶â',
      \ 'R': 'ðâ¯ðâð¶ð¸â¯',
      \ 'v': 'ðð¾ððð¶â',
      \ 'V': 'ðð¾ððð¶âââð¾ðâ¯',
      \ "\<C-v>": 'ðð¾ððð¶ââð·ââ´ð¸ð',
      \ }
let g:lightline.tab = {}
let g:lightline.tab.active = [ 'tabnum', 'filename', 'modified' ]
let g:lightline.tab.inactive = [ 'tabnum', 'filename', 'modified' ]
let g:lightline.tabline = {}
let g:lightline.tabline.left = [ [ 'buffers' ] ]
let g:lightline.tabline.right = [ [ ] ]

" [liuchengxu/vim-which-key]
let g:which_key_use_floating_win = 1
let g:which_key_hspace = 1
call which_key#register('<Space>', 'g:which_key_map_space')
let g:which_key_map_space = {
      \ 'a': 'align',
      \ 'b': 'git-blame',
      \ 'd': 'delete-buffer',
      \ 'f': 'find',
      \ 'h': 'history',
      \ 'k': 'find-buffer',
      \ 'm': 'comment',
      \ 'n': 'file-browser',
      \ 'o': 'find-file',
      \ 'S': 'repld-send-buffer',
      \ 's': 'repld-send',
      \ }
call which_key#register('?', 'g:which_key_map_question')
" Why are some buffer things broken?
let g:which_key_map_question = {
      \ 'b':
      \   { 'name': '+buffer',
      \     'f': ['call feedkeys("<Space>k")', 'find-buffer (<Space>k)'],
      \     'p': ['<C-k>', 'prev-buffer (<C-k>)'],
      \     'n': ['<C-j>', 'next-buffer (<C-j>)'],
      \     'd': ['<Space>d', 'delete-buffer (<Space>d)'],
      \     's': ['<Tab>', 'swap-buffer (<Tab>)'],
      \   },
      \ 'e':
      \   { 'name': '+edit',
      \     'j': ['<C-s>', 'find-and-replace (<C-s>)'],
      \     'x':
      \       { 'name': '+exchange',
      \         'c': ['call feedkeys("xc")', 'exchange-clear (xc)'],
      \         'l': ['call feedkeys("xx")', 'exchange-line (xx)'],
      \         'w': ['call feedkeys("xw")', 'exchange-word (xw)'],
      \       },
      \   },
      \ 'w':
      \   { 'name': '+window',
      \     'h': ['<C-h>', 'window-left (<C-h>)'],
      \     'l': ['<C-l>', 'window-right (<C-l>)'],
      \   },
      \ 'Q': ['call feedkeys("@q")', 'execute-macro-q'],
      \ }

nnoremap <silent> <Space> :WhichKey '<Space>'<CR>
vnoremap <silent> <Space> :WhichKeyVisual '<Space>'<CR>
nnoremap <silent> ? :WhichKey '?'<CR>

" [mcchrish/nnn.vim]
let g:nnn#set_default_mappings = 0
let g:nnn#command = 'nnn -c -n'
let g:nnn#layout = { 'window': { 'height': 0.9, 'width': 0.5, 'xoffset': 0.99 }}

" [mengelbrecht/lightline-bufferline]
let g:lightline#bufferline#modified = '+'

" [morhetz/gruvbox]
let g:gruvbox_italic = 1 " enable italics
let g:gruvbox_improved_strings = 1 " thought this was supposed to extra-highlight strings?

" [multiple-cursors]
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_word_key = '<C-n>'
" let g:multi_cursor_start_key = 'g<C-n>'
" let g:multi_cursor_select_all_key = 'g<A-n>'
let g:multi_cursor_next_key = '<C-n>'
let g:multi_cursor_prev_key = '<C-p>'
" let g:multi_cursor_skip_key = '<C-x>'
let g:multi_cursor_quit_key = '<Esc>'

" [neoclide/coc.nvim]
" <Left>/<Right> to jump around warnings/errors (annoying that it's only buffer-local)
" nmap <silent> <Left> <Plug>(coc-diagnostic-prev)
" nmap <silent> <Right> <Plug>(coc-diagnostic-next)
" gd to go to definition of thing under cursor
" Also <Del> (trying it out since it's one key)
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> <Del> <Plug>(coc-definition)
" <Enter> to show type of thing under cursor
" nnoremap <silent> <Enter> :call <SID>HandleEnter()<CR>
" <Space>i to open quickfix
" nnoremap <silent> <Space>i :CocFix<CR>
" Backspace to open all warnings/errors in a list
" nnoremap <silent> <BS> :CocList diagnostics<CR>

" function! s:HandleEnter()
"   if coc#util#has_float()
"     call coc#util#float_hide()
"   else
"     call CocAction('doHover')
"   endif
" endfunction

" [neovim/nvim-lspconfig]

nnoremap <silent> <Space>lcl :lua vim.lsp.buf.clear_references()<CR>
nnoremap <silent> <Space>lco :lua vim.lsp.buf.code_action()<CR>
nnoremap <silent> <Space>ldec :lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> <Space>ldef :lua vim.lsp.buf.definition()<CR>
nnoremap <silent> <Space>ldo :lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> <Space>lh :lua vim.lsp.buf.hover()<CR>
nnoremap <silent> <Space>lim :lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <Space>lin :lua vim.lsp.buf.incoming_calls()<CR>
nnoremap <silent> <Space>lo :lua vim.lsp.buf.outgoing_calls()<CR>
nnoremap <silent> <Space>lref :lua vim.lsp.buf.references()<CR>
nnoremap <silent> <Space>lren :lua vim.lsp.buf.rename()<CR>
nnoremap <silent> <Space>ls :lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> <Space>lt :lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> <Space>lw :lua vim.lsp.buf.workspace_symbol()<CR>

" [neovimhaskell/haskell-vim]
let g:haskell_indent_disable = 1
let g:haskell_enable_backpack = 1
let g:haskell_enable_pattern_synonyms = 1
let g:haskell_enable_quantification = 1
let g:haskell_enable_recursivedo = 1
let g:haskell_enable_typeroles = 1

" [romainl/vim-qf]
" Toggle the quickfix ("location") menu; move thru quickfix items with Alt+jk
" Hmm... I never seem to use these... do they even work? Wtf is quickfix?
" nmap <Space>l <Plug>(qf_qf_toggle)
" nmap <A-j> <Plug>(qf_qf_next)
" nmap <A-k> <Plug>(qf_qf_prev)

" [sdiehl/vim-ormolu]
let g:ormolu_disable = 1

autocmd mitchellwrosen FileType haskell nnoremap <buffer> <silent> <Space>p :call RunOrmolu()<CR>

" [mcchrish/nnn.vim]
nnoremap <silent> <Space>n :NnnPicker<CR>

" [mhinz/signify]
let g:signify_sign_change = 'Î'
let g:signify_sign_delete = '-'
" I only use git, so only bother integrating with it (performance win!)
let g:signify_vcs_list = [ 'git' ]

" [mhinz/vim-startify]
let g:startify_custom_footer = ['   [e]  empty buffer', '   [q]  quit']
let g:startify_custom_header = []
let g:startify_custom_indices = ['a', 's', 'd', 'f', 'l', 'g', 'h', 'w', 'r', 'u', 'o', 'p', 't', 'y', 'z', 'x', 'c', 'v', 'm', ',', '.', '/', 'b', 'n', '1', '2', '3', '4', '5', '6']
let g:startify_enable_special = 0
" faster startup
let g:startify_enable_unsafe = 1
let g:startify_files_number = 30
let g:startify_lists = [{ 'type': 'files' }]
let g:startify_relative_path = 1

" make floaterm not leave an empty buffer in startify
" autocmd User Startified setlocal buflisted

" In startify screen, undo my j=gj, k=gk mappings, because they press 'g'
autocmd mitchellwrosen FileType startify nnoremap <buffer> j j
autocmd mitchellwrosen FileType startify nnoremap <buffer> k k

" [psliwka/vim-smoothie]
let g:smoothie_base_speed = 15
let g:smoothie_no_default_mappings = 1
let g:smoothie_update_interval = 10

" very unfortunate: vmap variants don't work here...
nmap J <Plug>(SmoothieForwards)
nmap K <Plug>(SmoothieBackwards)

" [rhysd/git-messenger.vim]
let g:git_messenger_always_into_popup = v:true
let g:git_messenger_extra_blame_args = '-w'
let g:git_messenger_no_default_mappings = v:true

" blame the line under the cursor
nmap <Space>b <Plug>(git-messenger)

function! <SID>init_gitmessengerpopup() abort
  nmap <buffer><Enter> q
  nmap <buffer><Esc> q
  nmap <buffer>h o
  nmap <buffer>l O
endfunction
autocmd mitchellwrosen FileType gitmessengerpopup call <SID>init_gitmessengerpopup()

" [RRethy/vim-illuminate]
" highlight immediately
let g:Illuminate_delay = 0
" don't highlight the word under the cursor
let g:Illuminate_highlightUnderCursor = 0

" [tommcdo/vim-exchange]
" Don't make any key mappings
let g:exchange_no_mappings = 1

" x ("exchange") once to yank, x again to exchange with the first yank
nmap x <Plug>(Exchange)
" Manually make [exhange] replace 'w' with 'e', as vim does for e.g. 'c'
nmap xw <Plug>(Exchange)e
nmap xW <Plug>(Exchange)E
" xx to exchange-yank the whole line (and return cursor to where it was)
nmap xx m`<Plug>(ExchangeLine)``
" xc to clear the exchange
nmap xc <Plug>(ExchangeClear)
vmap x <Plug>(Exchange)

" [tpope/vim-commentary]
" Toggle comment
nmap <Space>m <Plug>CommentaryLine
vmap <Space>m <Plug>Commentary

" [tpope/vim-surround]
" Don't let surround provide any magic mappings
let g:surround_no_mappings = 1

" ds to delete surround and restore cursor position
" s to surround inner word and restore cursor position
" S to surround inner WORD and restore cursor position
" SS to surround current line restore cursor position
nmap ds' mz<Plug>Dsurround'`zh
nmap ds" mz<Plug>Dsurround"`zh
nmap ds( mz<Plug>Dsurround)`zh
nmap ds[ mz<Plug>Dsurround]`zh
nmap ds{ mz<Plug>Dsurround}`zh
nmap dsp mz<Plug>Dsurround)`zh
nmap ds<Space> mz<Plug>Dsurround <Space>`zh
nmap s' mz<Plug>Csurround w'`zl
nmap s" mz<Plug>Csurround w"`zl
nmap s( mz<Plug>Csurround w)`zl
nmap s[ mz<Plug>Csurround w]`zl
nmap s{ mz<Plug>Csurround w}`zl
nmap sp mz<Plug>Csurround w)`zl
nmap s<Space> mz<Plug>Csurround w <Space>`zl
nmap S' mz<Plug>Csurround W'`zl
nmap S" mz<Plug>Csurround W"`zl
nmap S( mz<Plug>Csurround W)`zl
nmap S[ mz<Plug>Csurround W]`zl
nmap S{ mz<Plug>Csurround W}`zl
nmap Sp mz<Plug>Csurround W)`zl
nmap S<Space> mz<Plug>Csurround W <Space>`zl
nmap SS' mz<Plug>Yssurround'`z
nmap SS" mz<Plug>Yssurround"`z
nmap SS( mz<Plug>Yssurround)`z
nmap SS[ mz<Plug>Yssurround]`z
nmap SS{ mz<Plug>Yssurround}`z
nmap SSp mz<Plug>Yssurround)`z
vmap s' <Plug>VSurround'
vmap s" <Plug>VSurround"
vmap s( <Plug>VSurround)
vmap s[ <Plug>VSurround]
vmap s{ <Plug>VSurround}
vmap sp <Plug>VSurround)

" [unblevable/quick-scope]
" let g:qs_lazy_highlight = 1 " only kick in after updatetime ms
let g:qs_max_chars = 120

" [voldikss/vim-floaterm]
" let g:floaterm_autoclose = 2
" let g:floaterm_title = ''
" nnoremap <Space>tl :FloatermNew --height=0.9 --position=right --width=0.5<CR>
" nnoremap <silent> <Space>tt :Tt --height=0.9 --position=right --width=0.5<CR>

" autocmd mitchellwrosen FileType floaterm nnoremap <buffer> <silent> <C-j> :FloatermNext<CR>
" autocmd mitchellwrosen FileType floaterm nnoremap <buffer> <silent> <C-k> :FloatermPrev<CR>

" [wellle/targets.vim]
" nmap cil9 cil)
" nmap cil0 cil)
" nmap cin9 cin)
" nmap cin0 cin)

" [Yggdroot/indentLine]
let g:indentLine_color_term = 239
let g:indentLine_char = 'â'

" ==============================================================================
" nvim-gtk settings
" ==============================================================================

if exists('g:GtkGuiLoaded')
  call rpcnotify(1, 'Gui', 'Font', 'PragmataPro Mono Liga 18')
endif

" ==============================================================================

" Notes to myself:
"
" 'o' in visual swaps cursor location
" g<C-a> in visual mode turns 1\n1\n1\n1 into 2\n3\n4\n5
" gi
" gv

" ==============================================================================
" Unicode goodies
" ==============================================================================

"       â¼  Controls and Latin-1 Suppl.
"  U+00A0    Â¡ Â¢ Â£ Â¤ Â¥ Â¦ Â§ Â¨ Â© Âª Â« Â¬ Â­ Â® Â¯

inoremap <C-u>! Â¡
inoremap <C-u>cent Â¢
inoremap <C-u>pound Â£
inoremap <C-u>currency Â¤
inoremap <C-u>yen Â¥
inoremap <C-u>brokenbar Â¦
inoremap <C-u>section Â§
inoremap <C-u>diaeresis Â¨
inoremap <C-u>copyright Â©
inoremap <C-u>fordinal Âª
inoremap <C-u><<" Â«
inoremap <C-u>not Â¬
inoremap <C-u>softhyphen Â­
inoremap <C-u>registered Â®
inoremap <C-u>macron Â¯

"  U+00B0  Â° Â± Â² Â³ Â´ Âµ Â¶ Â· Â¸ Â¹ Âº Â» Â¼ Â½ Â¾ Â¿

inoremap <C-u>degree Â°
inoremap <C-u>plusminus Â±
inoremap <C-u>^2 Â²
inoremap <C-u>^3 Â³
inoremap <C-u>` Â´
inoremap <C-u>micro Âµ
inoremap <C-u>pilcrow Â¶
inoremap <C-u>middledot Â·
inoremap <C-u>cedilla Â¸
inoremap <C-u>^1 Â¹
inoremap <C-u>mordinal Âº
inoremap <C-u>>>" Â»
inoremap <C-u>1/4 Â¼
inoremap <C-u>1/2 Â½
inoremap <C-u>3/4 Â¾
inoremap <C-u>? Â¿

"  U+00C0  Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã

" inoremap <C-u>graveA Ã
" inoremap <C-u>acuteA Ã
" inoremap <C-u>circumflexA Ã
" inoremap <C-u>tildeA Ã
" inoremap <C-u>diaeresisA Ã
" inoremap <C-u>ringA Ã
" inoremap <C-u>AE Ã
" inoremap <C-u>cedillaC Ã
" inoremap <C-u>graveE Ã
" inoremap <C-u>acuteE Ã
" inoremap <C-u>circumflexE Ã
" inoremap <C-u>diaeresisE Ã
" inoremap <C-u>graveI Ã
" inoremap <C-u>acuteI Ã
" inoremap <C-u>circumflexI Ã
" inoremap <C-u>diaeresisI Ã

"  U+00D0  Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã

" inoremap <C-u>Eth Ã
" inoremap <C-u>tildeN Ã
" inoremap <C-u>graveO Ã
" inoremap <C-u>acuteO Ã
" inoremap <C-u>circumflexO Ã
" inoremap <C-u>tildeO Ã
" inoremap <C-u>diaeresisO Ã
inoremap <C-u>mult Ã
" inoremap <C-u>strokeO Ã
" inoremap <C-u>graveU Ã
" inoremap <C-u>acuteU Ã
" inoremap <C-u>circumflexU Ã
" inoremap <C-u>diaeresisU Ã
" inoremap <C-u>acuteY Ã
" inoremap <C-u>Thorn Ã
" inoremap <C-u>eszett Ã

"  U+00E0  Ã  Ã¡ Ã¢ Ã£ Ã¤ Ã¥ Ã¦ Ã§ Ã¨ Ã© Ãª Ã« Ã¬ Ã­ Ã® Ã¯

" inoremap <C-u>gravea Ã 
" inoremap <C-u>acutea Ã¡
" inoremap <C-u>circumflexa Ã¢
" inoremap <C-u>tildea Ã£
" inoremap <C-u>diaeresisa Ã¤
" inoremap <C-u>ringa Ã¥
inoremap <C-u>ae Ã¦
" inoremap <C-u>cedillac Ã§
" inoremap <C-u>gravee Ã¨
" inoremap <C-u>acutee Ã©
" inoremap <C-u>circumflexe Ãª
" inoremap <C-u>diaeresise Ã«
" inoremap <C-u>gravei Ã¬
" inoremap <C-u>acutei Ã­
" inoremap <C-u>circumflexi Ã®
" inoremap <C-u>diaeresisi Ã¯

"  U+00F0  Ã° Ã± Ã² Ã³ Ã´ Ãµ Ã¶ Ã· Ã¸ Ã¹ Ãº Ã» Ã¼ Ã½ Ã¾ Ã¿

" inoremap <C-u>eth Ã°
" inoremap <C-u>tilden Ã±
" inoremap <C-u>graveo Ã²
" inoremap <C-u>acuteo Ã³
" inoremap <C-u>circumflexo Ã´
" inoremap <C-u>tildeo Ãµ
" inoremap <C-u>diaeresiso Ã¶
inoremap <C-u>div Ã·
" inoremap <C-u>strokeo Ã¸
" inoremap <C-u>graveu Ã¹
" inoremap <C-u>acuteu Ãº
" inoremap <C-u>circumflexu Ã»
" inoremap <C-u>diaeresisu Ã¼
" inoremap <C-u>acutey Ã½
" inoremap <C-u>thorn Ã¾
" inoremap <C-u>diaeresisy Ã¿

"       â¼  Latin Extended-A
"  U+0100  Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä

" inoremap <C-u>macronA Ä
" inoremap <C-u>macrona Ä
" inoremap <C-u>breveA Ä
" inoremap <C-u>brevea Ä
" inoremap <C-u>ogonekA Ä
" inoremap <C-u>ogoneka Ä
" inoremap <C-u>acuteC Ä
" inoremap <C-u>acutec Ä
" inoremap <C-u>circumflexC Ä
" inoremap <C-u>circumflexc Ä
" inoremap <C-u>dotC Ä
" inoremap <C-u>dotc Ä
" inoremap <C-u>caronC Ä
" inoremap <C-u>caronc Ä
" inoremap <C-u>caronD Ä
" inoremap <C-u>carond Ä

"  U+0110  Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä

" inoremap <C-u>strokeD Ä
" inoremap <C-u>stroked Ä
" inoremap <C-u>macronE Ä
" inoremap <C-u>macrone Ä
" inoremap <C-u>breveE Ä
" inoremap <C-u>brevee Ä
" inoremap <C-u>dotE Ä
" inoremap <C-u>dote Ä
" inoremap <C-u>ogonekE Ä
" inoremap <C-u>ogoneke Ä
" inoremap <C-u>caronE Ä
" inoremap <C-u>carone Ä
" inoremap <C-u>circumflexG Ä
" inoremap <C-u>circumflexg Ä
" inoremap <C-u>breveG Ä
" inoremap <C-u>breveg Ä

"  U+0120  Ä  Ä¡ Ä¢ Ä£ Ä¤ Ä¥ Ä¦ Ä§ Ä¨ Ä© Äª Ä« Ä¬ Ä­ Ä® Ä¯

" inoremap <C-u>dotG Ä 
" inoremap <C-u>dotg Ä¡
" inoremap <C-u>cedillaG Ä¢
" inoremap <C-u>cedillag Ä£
" inoremap <C-u>circumflexH Ä¤
" inoremap <C-u>circumflexh Ä¥
" inoremap <C-u>strokeH Ä¦
" inoremap <C-u>strokeh Ä§
" inoremap <C-u>tildeI Ä¨
" inoremap <C-u>tildei Ä©
" inoremap <C-u>macronI Äª
" inoremap <C-u>macroni Ä«
" inoremap <C-u>breveI Ä¬
" inoremap <C-u>brevei Ä­
" inoremap <C-u>ogonekI Ä®
" inoremap <C-u>ogoneki Ä¯

"  U+0130  Ä° Ä± Ä² Ä³ Ä´ Äµ Ä¶ Ä· Ä¸ Ä¹ Äº Ä» Ä¼ Ä½ Ä¾ Ä¿

" inoremap <C-u>dotI Ä°
" inoremap <C-u>dotlessi Ä±
" inoremap <C-u>IJ Ä²
" inoremap <C-u>ij Ä³
" inoremap <C-u>circumflexJ Ä´
" inoremap <C-u>circumflexj Äµ
" inoremap <C-u>cedillaK Ä¶
" inoremap <C-u>cedillak Ä·
" inoremap <C-u>kra Ä¸
" inoremap <C-u>acuteL Ä¹
" inoremap <C-u>acutel Äº
" inoremap <C-u>cedillaL Ä»
" inoremap <C-u>cedillal Ä¼
" inoremap <C-u>caronL Ä½
" inoremap <C-u>caronl Ä¾
" inoremap <C-u>middledotL Ä¿

"  U+0140  Å Å Å Å Å Å Å Å Å Å Å Å Å Å Å Å

" inoremap <C-u>middledotl Å
" inoremap <C-u>strokeL Å
" inoremap <C-u>strokel Å
" inoremap <C-u>acuteN Å
" inoremap <C-u>acuten Å
" inoremap <C-u>cedillaN Å
" inoremap <C-u>cedillan Å
" inoremap <C-u>caronN Å
" inoremap <C-u>caronn Å
" inoremap <C-u>apostrophen Å
" inoremap <C-u>Eng Å
" inoremap <C-u>eng Å
" inoremap <C-u>macronO Å
" inoremap <C-u>macrono Å
" inoremap <C-u>breveO Å
" inoremap <C-u>breveo Å

"  U+0150  Å Å Å Å Å Å Å Å Å Å Å Å Å Å Å Å

" inoremap <C-u>dacuteO Å
" inoremap <C-u>dacuteo Å
" inoremap <C-u>OE Å
" inoremap <C-u>oe Å
" inoremap <C-u>acuteR Å
" inoremap <C-u>acuter Å
" inoremap <C-u>cedillaR Å
" inoremap <C-u>cedillar Å
" inoremap <C-u>caronR Å
" inoremap <C-u>caronr Å
" inoremap <C-u>acuteS Å
" inoremap <C-u>acutes Å
" inoremap <C-u>circumflexS Å
" inoremap <C-u>circumflexs Å
" inoremap <C-u>cedillaS Å
" inoremap <C-u>cedillas Å

"  U+0160  Å  Å¡ Å¢ Å£ Å¤ Å¥ Å¦ Å§ Å¨ Å© Åª Å« Å¬ Å­ Å® Å¯

" inoremap <C-u>caronS Å 
" inoremap <C-u>carons Å¡
" inoremap <C-u>cedillaT Å¢
" inoremap <C-u>cedillat Å£
" inoremap <C-u>caronT Å¤
" inoremap <C-u>caront Å¥
" inoremap <C-u>strokeT Å¦
" inoremap <C-u>stroket Å§
" inoremap <C-u>tildeU Å¨
" inoremap <C-u>tildeu Å©
" inoremap <C-u>macronU Åª
" inoremap <C-u>macronu Å«
" inoremap <C-u>breveU Å¬
" inoremap <C-u>breveu Å­
" inoremap <C-u>ringU Å®
" inoremap <C-u>ringu Å¯

"  U+0170  Å° Å± Å² Å³ Å´ Åµ Å¶ Å· Å¸ Å¹ Åº Å» Å¼ Å½ Å¾ Å¿

" inoremap <C-u>dacuteU Å°
" inoremap <C-u>dacuteu Å±
" inoremap <C-u>ogonekU Å²
" inoremap <C-u>ogoneku Å³
" inoremap <C-u>circumflexW Å´
" inoremap <C-u>circumflexw Åµ
" inoremap <C-u>circumflexY Å¶
" inoremap <C-u>circumflexy Å·
" inoremap <C-u>diaeresisY Å¸
" inoremap <C-u>acuteZ Å¹
" inoremap <C-u>acutez Åº
" inoremap <C-u>dotZ Å»
" inoremap <C-u>dotz Å¼
" inoremap <C-u>caronZ Å½
" inoremap <C-u>caronz Å¾
" inoremap <C-u>shorts Å¿

"       â¼  Latin Extended-B
"  U+0180  Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ
"  U+0190  Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ
"  U+01A0  Æ  Æ¡ Æ¢ Æ£ Æ¤ Æ¥ Æ¦ Æ§ Æ¨ Æ© Æª Æ« Æ¬ Æ­ Æ® Æ¯
"  U+01B0  Æ° Æ± Æ² Æ³ Æ´ Æµ Æ¶ Æ· Æ¸ Æ¹ Æº Æ» Æ¼ Æ½ Æ¾ Æ¿
"  U+01C0  Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç
"  U+01D0  Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç
"  U+01E0  Ç  Ç¡ Ç¢ Ç£ Ç¤ Ç¥ Ç¦ Ç§ Ç¨ Ç© Çª Ç« Ç¬ Ç­ Ç® Ç¯
"  U+01F0  Ç° Ç± Ç² Ç³ Ç´ Çµ Ç¶ Ç· Ç¸ Ç¹ Çº Ç» Ç¼ Ç½ Ç¾ Ç¿
"  U+0200  È È È È È È È È È È È È È È È È
"  U+0210  È È È È È È È È È È È È È È È È
"  U+0220  È  È¡ È¢ È£ È¤ È¥ È¦ È§ È¨ È© Èª È« È¬ È­ È® È¯
"  U+0230  È° È± È² È³ È´ Èµ È¶ È· È¸ È¹ Èº È» È¼ È½ È¾ È¿
"  U+0240  É É É É É É É É É É É É É É É É

"       â¼  IPA Extensions
"  U+0250  É É É É É É É É É É É É É É É É
"  U+0260  É  É¡ É¢ É£ É¤ É¥ É¦ É§ É¨ É© Éª É« É¬ É­ É® É¯
"  U+0270  É° É± É² É³ É´ Éµ É¶ É· É¸ É¹ Éº É» É¼ É½ É¾ É¿
"  U+0280  Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê
"  U+0290  Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê
"  U+02A0  Ê  Ê¡ Ê¢ Ê£ Ê¤ Ê¥ Ê¦ Ê§ Ê¨ Ê© Êª Ê« Ê¬ Ê­ Ê® Ê¯

"       â¼  Spacing Modifier Letters
"  U+02B0  Ê° Ê± Ê² Ê³ Ê´ Êµ Ê¶ Ê· Ê¸ Ê¹ Êº Ê» Ê¼ Ê½ Ê¾ Ê¿
"  U+02C0  Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë
"  U+02D0  Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë
"  U+02E0  Ë  Ë¡ Ë¢ Ë£ Ë¤ Ë¥ Ë¦ Ë§ Ë¨ Ë© Ëª Ë« Ë¬ Ë­ Ë® Ë¯
"  U+02F0  Ë° Ë± Ë² Ë³ Ë´ Ëµ Ë¶ Ë· Ë¸ Ë¹ Ëº Ë» Ë¼ Ë½ Ë¾ Ë¿

"       â¼  Greek and Coptic
"  U+0380      Î Î Î Â· Î Î Î  Î  Î Î

"  U+0390  Î Î Î Î Î Î Î Î Î Î Î Î Î Î Î Î

inoremap <C-u>Gamma Î
inoremap <C-u>Delta Î
inoremap <C-u>Theta Î
inoremap <C-u>Lambda Î
inoremap <C-u>Xi Î

"  U+03A0  Î  Î¡   Î£ Î¤ Î¥ Î¦ Î§ Î¨ Î© Îª Î« Î¬ Î­ Î® Î¯

inoremap <C-u>Pi Î 
inoremap <C-u>Sigma Î£
inoremap <C-u>Upsilon Î¥
inoremap <C-u>Phi Î¦
inoremap <C-u>Psi Î¨
inoremap <C-u>Omega Î©

"  U+03B0  Î° Î± Î² Î³ Î´ Îµ Î¶ Î· Î¸ Î¹ Îº Î» Î¼ Î½ Î¾ Î¿

inoremap <C-u>alpha Î±
inoremap <C-u>beta Î²
inoremap <C-u>gamma Î³
inoremap <C-u>delta Î´
inoremap <C-u>epsilon Îµ
inoremap <C-u>zeta Î¶
inoremap <C-u>eta Î·
inoremap <C-u>theta Î¸
inoremap <C-u>iota Î¹
inoremap <C-u>kappa Îº
inoremap <C-u>lambda Î»
inoremap <C-u>mu Î¼
inoremap <C-u>nu Î½
inoremap <C-u>xi Î¾

"  U+03C0  Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï

inoremap <C-u>pi Ï
inoremap <C-u>rho Ï
inoremap <C-u>sigma Ï
inoremap <C-u>tau Ï
inoremap <C-u>upsilon Ï
inoremap <C-u>phi Ï
inoremap <C-u>chi Ï
inoremap <C-u>psi Ï
inoremap <C-u>omega Ï

"  U+03D0  Ï Ï   Ï Ï               Ï Ï
"  U+03F0  Ï° Ï±   Ïµ


"       â¼  Phonetic extensions
"  U+1D00  á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´
"  U+1D10  á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´
"  U+1D20  á´  á´¡ á´¢ á´£ á´¤ á´¥ á´¦ á´§ á´¨ á´© á´ª á´« á´¬ á´­ á´® á´¯

inoremap <C-u>^A á´¬
inoremap <C-u>^B á´®

"  U+1D30  á´° á´± á´² á´³ á´´ á´µ á´¶ á´· á´¸ á´¹ á´º á´» á´¼ á´½ á´¾ á´¿

inoremap <C-u>^D á´°
inoremap <C-u>^E á´±
inoremap <C-u>^G á´³
inoremap <C-u>^H á´´
inoremap <C-u>^I á´µ
inoremap <C-u>^J á´¶
inoremap <C-u>^K á´·
inoremap <C-u>^L á´¸
inoremap <C-u>^M á´¹
inoremap <C-u>^N á´º
inoremap <C-u>^O á´¼
inoremap <C-u>^P á´¾
inoremap <C-u>^R á´¿

"  U+1D40  áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ

inoremap <C-u>^T áµ
inoremap <C-u>^U áµ
inoremap <C-u>^W áµ
inoremap <C-u>^a áµ
inoremap <C-u>^alpha áµ
inoremap <C-u>^b áµ
inoremap <C-u>^d áµ
inoremap <C-u>^e áµ
inoremap <C-u>^g áµ
inoremap <C-u>^k áµ

"  U+1D50  áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ

inoremap <C-u>^m áµ
inoremap <C-u>^o áµ
inoremap <C-u>^p áµ
inoremap <C-u>^t áµ
inoremap <C-u>^u áµ
inoremap <C-u>^v áµ
inoremap <C-u>^beta áµ
inoremap <C-u>^gamma áµ
inoremap <C-u>^delta áµ

"  U+1D60  áµ  áµ¡ áµ¢ áµ£ áµ¤ áµ¥ áµ¦ áµ§ áµ¨ áµ© áµª áµ« áµ¬ áµ­ áµ® áµ¯

inoremap <C-u>^phi áµ 
inoremap <C-u>^chi áµ¡
inoremap <C-u>_i áµ¢
inoremap <C-u>_r áµ£
inoremap <C-u>_u áµ¤
inoremap <C-u>_v áµ¥
inoremap <C-u>_beta áµ¦
inoremap <C-u>_gamma áµ§
inoremap <C-u>_rho áµ¨
inoremap <C-u>_phi áµ©
inoremap <C-u>_chi áµª

"  U+1D70  áµ° áµ± áµ² áµ³ áµ´ áµµ áµ¶ áµ· áµ¸ áµ¹ áµº áµ» áµ¼ áµ½ áµ¾ áµ¿

"       â¼  General Punctuation
"  U+2000
"  U+2010  â â â â â â â â â â â â â â â â
"  U+2020  â  â¡ â¢ â£ â¤ â¥ â¦ â§

"  U+2030  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

inoremap <C-u>!! â¼

"  U+2040  â â â â â â â â â â â â â â â â

inoremap <C-u>?? â
inoremap <C-u>?! â
inoremap <C-u>!? â
inoremap <C-u>_* â

"  U+2050  â â â â â â â â â â â â â â â
"  U+2060

"       â¼  Superscripts and Subscripts
"  U+2070  â° â±   â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

inoremap <C-u>^0 â°
inoremap <C-u>^i â±
inoremap <C-u>^4 â´
inoremap <C-u>^5 âµ
inoremap <C-u>^6 â¶
inoremap <C-u>^7 â·
inoremap <C-u>^8 â¸
inoremap <C-u>^9 â¹
inoremap <C-u>^+ âº
inoremap <C-u>^- â»
inoremap <C-u>^= â¼
inoremap <C-u>^( â½
inoremap <C-u>^) â¾
inoremap <C-u>^n â¿

"  U+2080  â â â â â â â â â â â â â â â

inoremap <C-u>_0 â
inoremap <C-u>_1 â
inoremap <C-u>_2 â
inoremap <C-u>_3 â
inoremap <C-u>_4 â
inoremap <C-u>_5 â
inoremap <C-u>_6 â
inoremap <C-u>_7 â
inoremap <C-u>_8 â
inoremap <C-u>_9 â
inoremap <C-u>_+ â
inoremap <C-u>_- â
inoremap <C-u>_= â
inoremap <C-u>_( â
inoremap <C-u>_) â

"  U+2090  â â â â â â â â â â â â â

inoremap <C-u>_a â
inoremap <C-u>_e â
inoremap <C-u>_o â
inoremap <C-u>_x â
inoremap <C-u>_h â
inoremap <C-u>_k â
inoremap <C-u>_l â
inoremap <C-u>_m â
inoremap <C-u>_n â
inoremap <C-u>_p â
inoremap <C-u>_s â
inoremap <C-u>_t â

"       â¼  Currency Symbols
"  U+20A0            âª â« â¬
"  U+20B0        â½

"       â¼  Letterlike Symbols
"  U+2100  â â â â â â â â â â â â â â â â

inoremap <C-U>euler â

"  U+2110  â â â â â â â â â â â â â â â â

"  U+2120  â  â¡ â¢ â£ â¤ â¥ Î© â§ â¨ â© K Ã â¬ â­ â® â¯

inoremap <C-U>tm â¢

"  U+2130  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

inoremap <C-U>info â¹
inoremap <C-U>[pi â¼
inoremap <C-U>[gamma â½
inoremap <C-U>[Gamma â¾
inoremap <C-U>[Pi â¿

"  U+2140  â â â â â â â â â â â â â â â â

inoremap <C-U>[nsumm â
inoremap <C-U>[/D â
inoremap <C-U>[/d â
inoremap <C-U>[/e â
inoremap <C-U>[/i â
inoremap <C-U>[/j â

"       â¼  Number Forms
"  U+2150  â â â â â â â â â â â â â â â â

inoremap <C-U>1/7 â
inoremap <C-U>1/9 â
inoremap <C-U>1/10 â
inoremap <C-U>1/3 â
inoremap <C-U>2/3 â
inoremap <C-U>1/5 â
inoremap <C-U>2/5 â
inoremap <C-U>3/5 â
inoremap <C-U>4/5 â
inoremap <C-U>1/6 â
inoremap <C-U>5/6 â
inoremap <C-U>1/8 â
inoremap <C-U>3/8 â
inoremap <C-U>5/8 â
inoremap <C-U>7/8 â

"  U+2160  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

inoremap <C-U>romanI â 
inoremap <C-U>romanII â¡
inoremap <C-U>romanIII â¢
inoremap <C-U>romanIV â£
inoremap <C-U>romanV â¤
inoremap <C-U>romanVI â¥
inoremap <C-U>romanVII â¦
inoremap <C-U>romanVIII â§
inoremap <C-U>romanIX â¨
inoremap <C-U>romanX â©
inoremap <C-U>romanXI âª
inoremap <C-U>romanXII â«
inoremap <C-U>romanL â¬
inoremap <C-U>romanC â­
inoremap <C-U>romanD â®
inoremap <C-U>romanM â¯

"  U+2170  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

inoremap <C-U>romani â°
inoremap <C-U>romanii â±
inoremap <C-U>romaniii â²
inoremap <C-U>romaniv â³
inoremap <C-U>romanv â´
inoremap <C-U>romanvi âµ
inoremap <C-U>romanvii â¶
inoremap <C-U>romanviii â·
inoremap <C-U>romanix â¸
inoremap <C-U>romanx â¹
inoremap <C-U>romanxi âº
inoremap <C-U>romanxii â»
inoremap <C-U>romanl â¼
inoremap <C-U>romanc â½
inoremap <C-U>romand â¾
inoremap <C-U>romanm â¿

"  U+2180  â â â â â â â â â â â â


"       â¼  Arrows
"  U+2190  â â â â â â â â â â â â â â â â

inoremap <C-U><- â
inoremap <C-U>-^ â
inoremap <C-U>-> â
inoremap <C-U>-v â
inoremap <C-U><~ â
inoremap <C-U>~> â
inoremap <C-U><<- â
inoremap <C-U>-^^ â

"  U+21A0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

inoremap <C-U>->> â 
inoremap <C-U>-vv â¡
inoremap <C-U><-( â¢
inoremap <C-U>)-> â£
inoremap <C-U><-<Bar> â¤
inoremap <C-U><Bar>-^ â¥
inoremap <C-U><Bar>-> â¦
inoremap <C-U><Bar>-v â§
inoremap <C-U></ â©
inoremap <C-U>\> âª

"  U+21B0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿
"  U+21C0  â â â â â â â â â â â â â â â â

"  U+21D0  â â â â â â â â â â â â â â â â
inoremap <C-U><= â
inoremap <C-U>=^ â
inoremap <C-U>=> â
inoremap <C-U>=v â
inoremap <C-U><=> â
inoremap <C-U>^=v â

"  U+21E0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯
"  U+21F0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

"       â¼  Mathematical Operators
"  U+2200  â â â â â â â â â â â â â â â â

inoremap <C-u>forall â
inoremap <C-u>complement â
inoremap <C-u>pdiff â
inoremap <C-u>exists â
inoremap <C-u>nexists â
inoremap <C-u>empty â
inoremap <C-u>incr â
inoremap <C-u>nabla â
inoremap <C-u>elem â
inoremap <C-u>nelem â
inoremap <C-u>selem â
inoremap <C-u>contains â
inoremap <C-u>ncontains â
inoremap <C-u>scontains â
inoremap <C-u>endofproof â
inoremap <C-u>nproduct â

"  U+2210  â â â â â â â â â â â â â â â â

inoremap <C-u>ncoproduct â
inoremap <C-u>nsum â
inoremap <C-u>minus â
inoremap <C-u>minusplus â
inoremap <C-u>dotplus â
inoremap <C-u>divslash â
inoremap <C-u>setminus â
inoremap <C-u>asterisk â
inoremap <C-u>ring â
inoremap <C-u>bullet â
inoremap <C-u>root2 â
inoremap <C-u>root3 â
inoremap <C-u>root4 â
inoremap <C-u>proportional â
inoremap <C-u>infinity â
inoremap <C-u>rangle â

"  U+2220  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

inoremap <C-u>angle â 
inoremap <C-u>mangle â¡
inoremap <C-u>sangle â¢
inoremap <C-u>divides â£
inoremap <C-u>ndivides â¤
inoremap <C-u>parallel â¥
inoremap <C-u>nparallel â¦
inoremap <C-u>and â§
inoremap <C-u>or â¨
inoremap <C-u>intersection â©
inoremap <C-u>union âª
inoremap <C-u>integral â«
inoremap <C-u>integral2 â¬
inoremap <C-u>integral3 â­

"  U+2230  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

inoremap <C-u>therefore â´
inoremap <C-u>because âµ
inoremap <C-u>ratio â¶
inoremap <C-u>proportion â·
inoremap <C-u>:: â·
inoremap <C-u>dotminus â¸
inoremap <C-u>excess â¹
inoremap <C-u>gproportion âº
inoremap <C-u>homothetic â»
inoremap <C-u>~ â¼
inoremap <C-U>rtilde â½
inoremap <C-U>sine â¿

"  U+2240  â â â â â â â â â â â â â â â â

inoremap <C-U>wreath â
inoremap <C-U>/~ â
inoremap <C-U>-~ â
inoremap <C-U>~- â
inoremap <C-U>/~- â
inoremap <C-U>~= â
inoremap <C-U>~/= â
inoremap <C-U>/~= â
inoremap <C-U>~~ â
inoremap <C-U>/~~ â
inoremap <C-U>~~- â
inoremap <C-U>~~~ â

"  U+2250  â â â â â â â â â â â â â â â â

inoremap <C-U>:= â
inoremap <C-U>=: â
inoremap <C-U>def= â
inoremap <C-U>?= â

"  U+2260  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

inoremap <C-U>/= â 
inoremap <C-U>=3 â¡
inoremap <C-U>/=3 â¢
inoremap <C-U>=4 â£
inoremap <C-U>=< â¤
inoremap <C-U>>= â¥
inoremap <C-U><< âª
inoremap <C-U>>> â«
inoremap <C-U>/< â®
inoremap <C-U>/> â¯

"  U+2270  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

inoremap <C-U>/=< â°
inoremap <C-U>/>= â±

"  U+2280  â â â â â â â â â â â â â â â â

inoremap <C-U>psubset â
inoremap <C-U>psuperset â
inoremap <C-U>/psubset â
inoremap <C-U>/psuperset â
inoremap <C-U>subset â
inoremap <C-U>superset â
inoremap <C-U>/subset â
inoremap <C-U>/superset â
inoremap <C-U>multiset â
inoremap <C-U>multisetmult â
inoremap <C-U>multisetunion â

"  U+2290  â â â â â â â â â â â â â â â â

inoremap <C-U>o+ â
inoremap <C-U>o- â
inoremap <C-U>ox â
inoremap <C-U>o/ â
inoremap <C-U>o. â
inoremap <C-U>oo â
inoremap <C-U>o* â
inoremap <C-U>o= â
inoremap <C-U>s+ â
inoremap <C-U>s- â

"  U+22A0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

inoremap <C-U>sx â 
inoremap <C-U>s. â¡
inoremap <C-U>top â¤
inoremap <C-U>bottom â¥

"  U+22B0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

inoremap <C-U>-o â¸
inoremap <C-U>xor â»
inoremap <C-U>nand â¼
inoremap <C-U>nor â½

"  U+22C0  â â â â â â â â â â â â â â â â

inoremap <C-U>n-and â
inoremap <C-U>n-or â
inoremap <C-U>n-intersect â
inoremap <C-U>n-union â
inoremap <C-U>diamond â
inoremap <C-U>dot â
inoremap <C-U>star â
inoremap <C-U>bowtie â
inoremap <C-U>cor â
inoremap <C-U>cand â

"  U+22D0  â â â â â â â â â â â â â â â â

inoremap <C-U><<< â
inoremap <C-U>>>> â

"  U+22E0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯
"  U+22F0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

"       â¼  Miscellaneous Technical
"  U+2300  â â â â â â â â â â â â â â â â
"  U+2310  â â â â â â â â â â â â â â â â
"  U+2320  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ ã ã â« â¬
"  U+2330      â´  â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿
"  U+2340  â â â â â â â â â â â â â â â â
"  U+2350  â â â â â â â â â â â â â â â â
"  U+2360  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯
"  U+2370  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº   â½
"  U+2380  â â â â â â â â â â â â â â â â
"  U+2390  â â â â â â â â â â â â â â â â
"  U+23A0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯
"  U+23B0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½
"  U+23C0                â
"  U+23D0  â                       â â â â
"  U+23E0  â  â¡
"  U+23F0        â³             â» â¼ â½ â¾

"       â¼  Enclosed Alphanumerics
"  U+2460  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨
"  U+24B0              â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿
"  U+24C0  â â â â â â â â â â â â â â â â
"  U+24D0  â â â â â â â â â â â â â â â â
"  U+24E0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª

"       â¼  Misc. Mathematical Symbols-A
"  U+27C0  â â â â â â â â â â â   â
"  U+27D0  â â â â â â â â â â â â â â â â
"  U+27E0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

inoremap <C-U>[[ â¦
inoremap <C-U>]] â§
inoremap <C-U>[< â¨
inoremap <C-U>>] â©
inoremap <C-U>[<< âª
inoremap <C-U>>>] â«

"       â¼  Suppl. Arrows-A
"  U+27F0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

"       â¼  Supplemental Arrows-B
"  U+2900  â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤
"  U+2910  â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤
"  U+2920  â¤  â¤¡ â¤¢ â¤£ â¤¤ â¤¥ â¤¦ â¤§ â¤¨ â¤© â¤ª â¤« â¤¬ â¤­ â¤® â¤¯
"  U+2930  â¤° â¤± â¤² â¤³ â¤´ â¤µ â¤¶ â¤· â¤¸ â¤¹ â¤º â¤» â¤¼ â¤½ â¤¾ â¤¿
"  U+2940  â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥
"  U+2950  â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥
"  U+2960  â¥  â¥¡ â¥¢ â¥£ â¥¤ â¥¥ â¥¦ â¥§ â¥¨ â¥© â¥ª â¥« â¥¬ â¥­ â¥® â¥¯
"  U+2970  â¥° â¥± â¥² â¥³ â¥´ â¥µ â¥¶ â¥· â¥¸ â¥¹ â¥º â¥» â¥¼ â¥½ â¥¾ â¥¿

"       â¼  Misc. Math Symbols-B
"  U+2980  â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦
"  U+2990  â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦
"  U+29A0  â¦  â¦¡ â¦¢ â¦£ â¦¤ â¦¥ â¦¦ â¦§ â¦¨ â¦© â¦ª â¦« â¦¬ â¦­ â¦® â¦¯
"  U+29B0  â¦° â¦± â¦² â¦³ â¦´ â¦µ â¦¶ â¦· â¦¸ â¦¹ â¦º â¦» â¦¼ â¦½ â¦¾ â¦¿
"  U+29C0  â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§
"  U+29D0  â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§
"  U+29E0  â§  â§¡ â§¢ â§£ â§¤ â§¥ â§¦ â§§ â§¨ â§© â§ª â§« â§¬ â§­ â§® â§¯
"  U+29F0  â§° â§± â§² â§³ â§´ â§µ â§¶ â§· â§¸ â§¹ â§º â§» â§¼ â§½ â§¾ â§¿

inoremap <C-U>spot â¦
inoremap <C-U>: â¦
inoremap <C-U>{{ â¦
inoremap <C-U>}} â¦
inoremap <C-U>(( â¦
inoremap <C-U>)) â¦

"       â¼  Supplemental Math Operators
"  U+2A00  â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨
"  U+2A10  â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨
"  U+2A20  â¨  â¨¡ â¨¢ â¨£ â¨¤ â¨¥ â¨¦ â¨§ â¨¨ â¨© â¨ª â¨« â¨¬ â¨­ â¨® â¨¯
"  U+2A30  â¨° â¨± â¨² â¨³ â¨´ â¨µ â¨¶ â¨· â¨¸ â¨¹ â¨º â¨» â¨¼ â¨½ â¨¾ â¨¿
"  U+2A40  â© â© â© â© â© â© â© â© â© â© â© â© â© â© â© â©
"  U+2A50  â© â© â© â© â© â© â© â© â© â© â© â© â© â© â© â©
"  U+2A60  â©  â©¡ â©¢ â©£ â©¤ â©¥ â©¦ â©§ â©¨ â©© â©ª â©« â©¬ â©­ â©® â©¯
"  U+2A70  â©° â©± â©² â©³ â©´ â©µ â©¶ â©· â©¸ â©¹ â©º â©» â©¼ â©½ â©¾ â©¿
"  U+2A80  âª âª âª âª âª âª âª âª âª âª âª âª âª âª âª âª
"  U+2A90  âª âª âª âª âª âª âª âª âª âª âª âª âª âª âª âª
"  U+2AA0  âª  âª¡ âª¢ âª£ âª¤ âª¥ âª¦ âª§ âª¨ âª© âªª âª« âª¬ âª­ âª® âª¯
"  U+2AB0  âª° âª± âª² âª³ âª´ âªµ âª¶ âª· âª¸ âª¹ âªº âª» âª¼ âª½ âª¾ âª¿
"  U+2AC0  â« â« â« â« â« â« â« â« â« â« â« â« â« â« â« â«
"  U+2AD0  â« â« â« â« â« â« â« â« â« â« â« â« â« â« â« â«
"  U+2AE0  â«  â«¡ â«¢ â«£ â«¤ â«¥ â«¦ â«§ â«¨ â«© â«ª â«« â«¬ â«­ â«® â«¯
"  U+2AF0  â«° â«± â«² â«³ â«´ â«µ â«¶ â«· â«¸ â«¹ â«º â«» â«¼ â«½ â«¾ â«¿

inoremap <C-u>; â¨¾
inoremap <C-U><Bar><Bar><Bar> â«´
inoremap <C-U>/// â«»

"       â¼  Misc. Symbols and Arrows
"  U+2B00  â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬
"  U+2B10  â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬
"  U+2B20  â¬  â¬¡ â¬¢ â¬£ â¬¤ â¬¥ â¬¦ â¬§ â¬¨ â¬© â¬ª â¬« â¬¬ â¬­ â¬® â¬¯
"  U+2B30  â¬° â¬± â¬² â¬³ â¬´ â¬µ â¬¶ â¬· â¬¸ â¬¹ â¬º â¬» â¬¼ â¬½ â¬¾ â¬¿
"  U+2B40  â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­
"  U+2B50  â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­
"  U+2B60  â­  â­¡ â­¢ â­£ â­¤ â­¥ â­¦ â­§ â­¨ â­© â­ª â­« â­¬ â­­ â­® â­¯
"  U+2B70  â­° â­± â­² â­³    â­¶ â­· â­¸ â­¹ â­º â­» â­¼ â­½ â­¾ â­¿
"  U+2B80  â® â® â® â® â® â® â® â® â® â® â® â® â® â® â® â®
"  U+2B90  â® â® â® â® â® â®    â® â® â® â® â® â® â® â®
"  U+2BA0  â®  â®¡ â®¢ â®£ â®¤ â®¥ â®¦ â®§ â®¨ â®© â®ª â®« â®¬ â®­ â®® â®¯
"  U+2BB0  â®° â®± â®² â®³ â®´ â®µ â®¶ â®· â®¸ â®¹      â®½ â®¾ â®¿
"  U+2BC0  â¯ â¯ â¯ â¯ â¯ â¯ â¯ â¯ â¯   â¯ â¯ â¯ â¯ â¯ â¯
"  U+2BD0  â¯ â¯
"  U+2BE0                             â¯¬ â¯­ â¯® â¯¯
"  U+2C70    â±±
"  U+2E20                 â¸®

" See https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols
" Holes are filled here (e.g. planck constant â is what we use for script h)
"
"       â¼  Mathematical Alphan. Symbols
"
" ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð
" ð ð ð ð ð ð ð  ð¡ ð¢ ð£ ð¤ ð¥ ð¦ ð§ ð¨ ð© ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³

inoremap <C-U>bA ð
inoremap <C-U>bB ð
inoremap <C-U>bC ð
inoremap <C-U>bD ð
inoremap <C-U>bE ð
inoremap <C-U>bF ð
inoremap <C-U>bG ð
inoremap <C-U>bH ð
inoremap <C-U>bI ð
inoremap <C-U>bJ ð
inoremap <C-U>bK ð
inoremap <C-U>bL ð
inoremap <C-U>bM ð
inoremap <C-U>bN ð
inoremap <C-U>bO ð
inoremap <C-U>bP ð
inoremap <C-U>bQ ð
inoremap <C-U>bR ð
inoremap <C-U>bS ð
inoremap <C-U>bT ð
inoremap <C-U>bU ð
inoremap <C-U>bV ð
inoremap <C-U>bW ð
inoremap <C-U>bX ð
inoremap <C-U>bY ð
inoremap <C-U>bZ ð
inoremap <C-U>ba ð
inoremap <C-U>bb ð
inoremap <C-U>bc ð
inoremap <C-U>bd ð
inoremap <C-U>be ð
inoremap <C-U>bf ð
inoremap <C-U>bg ð 
inoremap <C-U>bh ð¡
inoremap <C-U>bi ð¢
inoremap <C-U>bj ð£
inoremap <C-U>bk ð¤
inoremap <C-U>bl ð¥
inoremap <C-U>bm ð¦
inoremap <C-U>bn ð§
inoremap <C-U>bo ð¨
inoremap <C-U>bp ð©
inoremap <C-U>bq ðª
inoremap <C-U>br ð«
inoremap <C-U>bs ð¬
inoremap <C-U>bt ð­
inoremap <C-U>bu ð®
inoremap <C-U>bv ð¯
inoremap <C-U>bw ð°
inoremap <C-U>bx ð±
inoremap <C-U>by ð²
inoremap <C-U>bz ð³

" ð´ ðµ ð¶ ð· ð¸ ð¹ ðº ð» ð¼ ð½ ð¾ ð¿ ð ð ð ð ð ð ð ð ð ð ð ð ð ð
" ð ð ð ð ð ð ð   ð ð ð ð ð ð ð ð ð ð ð  ð¡ ð¢ ð£ ð¤ ð¥ ð¦ ð§

inoremap <C-U>iA ð´
inoremap <C-U>iB ðµ
inoremap <C-U>iC ð¶
inoremap <C-U>iD ð·
inoremap <C-U>iE ð¸
inoremap <C-U>iF ð¹
inoremap <C-U>iG ðº
inoremap <C-U>iH ð»
inoremap <C-U>iI ð¼
inoremap <C-U>iJ ð½
inoremap <C-U>iK ð¾
inoremap <C-U>iL ð¿
inoremap <C-U>iM ð
inoremap <C-U>iN ð
inoremap <C-U>iO ð
inoremap <C-U>iP ð
inoremap <C-U>iQ ð
inoremap <C-U>iR ð
inoremap <C-U>iS ð
inoremap <C-U>iT ð
inoremap <C-U>iU ð
inoremap <C-U>iV ð
inoremap <C-U>iW ð
inoremap <C-U>iX ð
inoremap <C-U>iY ð
inoremap <C-U>iZ ð
inoremap <C-U>ia ð
inoremap <C-U>ib ð
inoremap <C-U>ic ð
inoremap <C-U>id ð
inoremap <C-U>ie ð
inoremap <C-U>if ð
inoremap <C-U>ig ð
inoremap <C-U>ih â
inoremap <C-U>ii ð
inoremap <C-U>ij ð
inoremap <C-U>ik ð
inoremap <C-U>il ð
inoremap <C-U>im ð
inoremap <C-U>in ð
inoremap <C-U>io ð
inoremap <C-U>ip ð
inoremap <C-U>iq ð
inoremap <C-U>ir ð
inoremap <C-U>is ð 
inoremap <C-U>it ð¡
inoremap <C-U>iu ð¢
inoremap <C-U>iv ð£
inoremap <C-U>iw ð¤
inoremap <C-U>ix ð¥
inoremap <C-U>iy ð¦
inoremap <C-U>iz ð§

" ð¨ ð© ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³ ð´ ðµ ð¶ ð· ð¸ ð¹ ðº ð» ð¼ ð½ ð¾ ð¿ ð ð
" ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð

inoremap <C-U>biA ð¨
inoremap <C-U>biB ð©
inoremap <C-U>biC ðª
inoremap <C-U>biD ð«
inoremap <C-U>biE ð¬
inoremap <C-U>biF ð­
inoremap <C-U>biG ð®
inoremap <C-U>biH ð¯
inoremap <C-U>biI ð°
inoremap <C-U>biJ ð±
inoremap <C-U>biK ð²
inoremap <C-U>biL ð³
inoremap <C-U>biM ð´
inoremap <C-U>biN ðµ
inoremap <C-U>biO ð¶
inoremap <C-U>biP ð·
inoremap <C-U>biQ ð¸
inoremap <C-U>biR ð¹
inoremap <C-U>biS ðº
inoremap <C-U>biT ð»
inoremap <C-U>biU ð¼
inoremap <C-U>biV ð½
inoremap <C-U>biW ð¾
inoremap <C-U>biX ð¿
inoremap <C-U>biY ð
inoremap <C-U>biZ ð
inoremap <C-U>bia ð
inoremap <C-U>bib ð
inoremap <C-U>bic ð
inoremap <C-U>bid ð
inoremap <C-U>bie ð
inoremap <C-U>bif ð
inoremap <C-U>big ð
inoremap <C-U>bih ð
inoremap <C-U>bii ð
inoremap <C-U>bij ð
inoremap <C-U>bik ð
inoremap <C-U>bil ð
inoremap <C-U>bim ð
inoremap <C-U>bin ð
inoremap <C-U>bio ð
inoremap <C-U>bip ð
inoremap <C-U>biq ð
inoremap <C-U>bir ð
inoremap <C-U>bis ð
inoremap <C-U>bit ð
inoremap <C-U>biu ð
inoremap <C-U>biv ð
inoremap <C-U>biw ð
inoremap <C-U>bix ð
inoremap <C-U>biy ð
inoremap <C-U>biz ð

" ð   ð ð     ð¢     ð¥ ð¦     ð© ðª ð« ð¬   ð® ð¯ ð° ð± ð² ð³ ð´ ðµ
" ð¶ ð· ð¸ ð¹   ð»   ð½ ð¾ ð¿ ð   ð ð   ð ð ð ð ð ð ð ð ð ð ð

inoremap <C-U>sA ð
inoremap <C-U>sB â¬
inoremap <C-U>sC ð
inoremap <C-U>sD ð
inoremap <C-U>sE â°
inoremap <C-U>sF â±
inoremap <C-U>sG ð¢
inoremap <C-U>sH â
inoremap <C-U>sI â
inoremap <C-U>sJ ð¥
inoremap <C-U>sK ð¦
inoremap <C-U>sL â
inoremap <C-U>sM â³
inoremap <C-U>sN ð©
inoremap <C-U>sO ðª
inoremap <C-U>sP ð«
inoremap <C-U>sQ ð¬
inoremap <C-U>sR â
inoremap <C-U>sS ð®
inoremap <C-U>sT ð¯
inoremap <C-U>sU ð°
inoremap <C-U>sV ð±
inoremap <C-U>sW ð²
inoremap <C-U>sX ð³
inoremap <C-U>sY ð´
inoremap <C-U>sZ ðµ
inoremap <C-U>sa ð¶
inoremap <C-U>sb ð·
inoremap <C-U>sc ð¸
inoremap <C-U>sd ð¹
inoremap <C-U>se â¯
inoremap <C-U>sf ð»
inoremap <C-U>sg â
inoremap <C-U>sh ð½
inoremap <C-U>si ð¾
inoremap <C-U>sj ð¿
inoremap <C-U>sk ð
inoremap <C-U>sl â
inoremap <C-U>sm ð
inoremap <C-U>sn ð
inoremap <C-U>so â´
inoremap <C-U>sp ð
inoremap <C-U>sq ð
inoremap <C-U>sr ð
inoremap <C-U>ss ð
inoremap <C-U>st ð
inoremap <C-U>su ð
inoremap <C-U>sv ð
inoremap <C-U>sw ð
inoremap <C-U>sx ð
inoremap <C-U>sy ð
inoremap <C-U>sz ð

" ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð  ð¡ ð¢ ð£ ð¤ ð¥ ð¦ ð§ ð¨ ð©
" ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³ ð´ ðµ ð¶ ð· ð¸ ð¹ ðº ð» ð¼ ð½ ð¾ ð¿ ð ð ð ð

inoremap <C-U>sbA ð
inoremap <C-U>sbB ð
inoremap <C-U>sbC ð
inoremap <C-U>sbD ð
inoremap <C-U>sbE ð
inoremap <C-U>sbF ð
inoremap <C-U>sbG ð
inoremap <C-U>sbH ð
inoremap <C-U>sbI ð
inoremap <C-U>sbJ ð
inoremap <C-U>sbK ð
inoremap <C-U>sbL ð
inoremap <C-U>sbM ð
inoremap <C-U>sbN ð
inoremap <C-U>sbO ð
inoremap <C-U>sbP ð
inoremap <C-U>sbQ ð 
inoremap <C-U>sbR ð¡
inoremap <C-U>sbS ð¢
inoremap <C-U>sbT ð£
inoremap <C-U>sbU ð¤
inoremap <C-U>sbV ð¥
inoremap <C-U>sbW ð¦
inoremap <C-U>sbX ð§
inoremap <C-U>sbY ð¨
inoremap <C-U>sbZ ð©
inoremap <C-U>sba ðª
inoremap <C-U>sbb ð«
inoremap <C-U>sbc ð¬
inoremap <C-U>sbd ð­
inoremap <C-U>sbe ð®
inoremap <C-U>sbf ð¯
inoremap <C-U>sbg ð°
inoremap <C-U>sbh ð±
inoremap <C-U>sbi ð²
inoremap <C-U>sbj ð³
inoremap <C-U>sbk ð´
inoremap <C-U>sbl ðµ
inoremap <C-U>sbm ð¶
inoremap <C-U>sbn ð·
inoremap <C-U>sbo ð¸
inoremap <C-U>sbp ð¹
inoremap <C-U>sbq ðº
inoremap <C-U>sbr ð»
inoremap <C-U>sbs ð¼
inoremap <C-U>sbt ð½
inoremap <C-U>sbu ð¾
inoremap <C-U>sbv ð¿
inoremap <C-U>sbw ð
inoremap <C-U>sbx ð
inoremap <C-U>sby ð
inoremap <C-U>sbz ð

" ð¸ ð¹   ð» ð¼ ð½ ð¾   ð ð ð ð ð   ð       ð ð ð ð ð ð ð
" ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð  ð¡ ð¢ ð£ ð¤ ð¥ ð¦ ð§ ð¨ ð© ðª ð«

inoremap <C-U>[A ð¸
inoremap <C-U>[B ð¹
inoremap <C-U>[C â
inoremap <C-U>[D ð»
inoremap <C-U>[E ð¼
inoremap <C-U>[F ð½
inoremap <C-U>[G ð¾
inoremap <C-U>[H â
inoremap <C-U>[H â
inoremap <C-U>[I ð
inoremap <C-U>[J ð
inoremap <C-U>[K ð
inoremap <C-U>[L ð
inoremap <C-U>[M ð
inoremap <C-U>[N â
inoremap <C-U>[O ð
inoremap <C-U>[P â
inoremap <C-U>[Q â
inoremap <C-U>[R â
inoremap <C-U>[S ð
inoremap <C-U>[T ð
inoremap <C-U>[U ð
inoremap <C-U>[V ð
inoremap <C-U>[W ð
inoremap <C-U>[X ð
inoremap <C-U>[Y ð
inoremap <C-U>[Z â¤
inoremap <C-U>[a ð
inoremap <C-U>[b ð
inoremap <C-U>[c ð
inoremap <C-U>[d ð
inoremap <C-U>[e ð
inoremap <C-U>[f ð
inoremap <C-U>[g ð
inoremap <C-U>[h ð
inoremap <C-U>[i ð
inoremap <C-U>[j ð
inoremap <C-U>[k ð
inoremap <C-U>[l ð
inoremap <C-U>[m ð
inoremap <C-U>[n ð
inoremap <C-U>[o ð 
inoremap <C-U>[p ð¡
inoremap <C-U>[q ð¢
inoremap <C-U>[r ð£
inoremap <C-U>[s ð¤
inoremap <C-U>[t ð¥
inoremap <C-U>[u ð¦
inoremap <C-U>[v ð§
inoremap <C-U>[w ð¨
inoremap <C-U>[x ð©
inoremap <C-U>[y ðª
inoremap <C-U>[z ð«

" ð¨ ð© ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³ ð´ ðµ ð¶ ð· ð¸ ð¹ ðº ð» ð¼ ð½ ð¾ ð¿ ð ð
" ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð  ð¡

inoremap <C-U>bAlpha ð¨
inoremap <C-U>bBeta ð©
inoremap <C-U>bGamma ðª
inoremap <C-U>bDelta ð«
inoremap <C-U>bEpsilon ð¬
inoremap <C-U>bZeta ð­
inoremap <C-U>bEta ð®
inoremap <C-U>bTheta ð¯
inoremap <C-U>bIota ð°
inoremap <C-U>bKappa ð±
inoremap <C-U>bLambda ð²
inoremap <C-U>bMu ð³
inoremap <C-U>bNu ð´
inoremap <C-U>bXi ðµ
inoremap <C-U>bOmnicron ð¶
inoremap <C-U>bPi ð·
inoremap <C-U>bRho ð¸
inoremap <C-U>bSigma ðº
inoremap <C-U>bTau ð»
inoremap <C-U>bUpsilon ð¼
inoremap <C-U>bPhi ð½
inoremap <C-U>bChi ð¾
inoremap <C-U>bPsi ð¿
inoremap <C-U>bOmega ð
inoremap <C-U>bNabla ð
inoremap <C-U>balpha ð
inoremap <C-U>bbeta ð
inoremap <C-U>bgamma ð
inoremap <C-U>bdelta ð
inoremap <C-U>bepsilon ð
inoremap <C-U>bzeta ð
" inoremap <C-U>beta ð
inoremap <C-U>btheta ð
inoremap <C-U>biota ð
inoremap <C-U>bkappa ð
inoremap <C-U>blambda ð
inoremap <C-U>bmu ð
inoremap <C-U>bnu ð
inoremap <C-U>bxi ð
inoremap <C-U>bomnicron ð
inoremap <C-U>bpi ð
inoremap <C-U>brho ð
inoremap <C-U>bfsigma ð
inoremap <C-U>bsigma ð
inoremap <C-U>btau ð
inoremap <C-U>bupsilon ð
inoremap <C-U>bphi ð
inoremap <C-U>bchi ð
inoremap <C-U>bpsi ð
inoremap <C-U>bomega ð
inoremap <C-U>bpdiff ð

" ð¢ ð£ ð¤ ð¥ ð¦ ð§ ð¨ ð© ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³ ð´ ðµ ð¶ ð· ð¸ ð¹ ðº ð»
" ð¼ ð½ ð¾ ð¿ ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð

inoremap <C-U>iAlpha ð¢
inoremap <C-U>iBeta ð£
inoremap <C-U>iGamma ð¤
inoremap <C-U>iDelta ð¥
inoremap <C-U>iEpsilon ð¦
inoremap <C-U>iZeta ð§
inoremap <C-U>iEta ð¨
inoremap <C-U>iTheta ð©
inoremap <C-U>iIota ðª
inoremap <C-U>iKappa ð«
inoremap <C-U>iLambda ð¬
inoremap <C-U>iMu ð­
inoremap <C-U>iNu ð®
inoremap <C-U>iXi ð¯
inoremap <C-U>iOmnicron ð°
inoremap <C-U>iPi ð±
inoremap <C-U>iRho ð²
inoremap <C-U>iSigma ð´
inoremap <C-U>iTau ðµ
inoremap <C-U>iUpsilon ð¶
inoremap <C-U>iPhi ð·
inoremap <C-U>iChi ð¸
inoremap <C-U>iPsi ð¹
inoremap <C-U>iOmega ðº
inoremap <C-U>iNabla ð»
inoremap <C-U>ialpha ð¼
inoremap <C-U>ibeta ð½
inoremap <C-U>igamma ð¾
inoremap <C-U>idelta ð¿
inoremap <C-U>iepsilon ð
inoremap <C-U>izeta ð
inoremap <C-U>ieta ð
inoremap <C-U>itheta ð
inoremap <C-U>iiota ð
inoremap <C-U>ikappa ð
inoremap <C-U>ilambda ð
inoremap <C-U>imu ð
inoremap <C-U>inu ð
inoremap <C-U>ixi ð
inoremap <C-U>iomnicron ð
inoremap <C-U>ipi ð
inoremap <C-U>irho ð
inoremap <C-U>ifsigma ð
inoremap <C-U>isigma ð
inoremap <C-U>itau ð
inoremap <C-U>iupsilon ð
inoremap <C-U>iphi ð
inoremap <C-U>ichi ð
inoremap <C-U>ipsi ð
inoremap <C-U>iomega ð
inoremap <C-U>ipdiff ð

" ð ð ð ð ð  ð¡ ð¢ ð£ ð¤ ð¥ ð¦ ð§ ð¨ ð© ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³ ð´ ðµ
" ð¶ ð· ð¸ ð¹ ðº ð» ð¼ ð½ ð¾ ð¿ ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð

inoremap <C-U>biAlpha ð
inoremap <C-U>biBeta ð
inoremap <C-U>biGamma ð
inoremap <C-U>biDelta ð
inoremap <C-U>biEpsilon ð 
inoremap <C-U>biZeta ð¡
inoremap <C-U>biEta ð¢
inoremap <C-U>biTheta ð£
inoremap <C-U>biIota ð¤
inoremap <C-U>biKappa ð¥
inoremap <C-U>biLambda ð¦
inoremap <C-U>biMu ð§
inoremap <C-U>biNu ð¨
inoremap <C-U>biXi ð©
inoremap <C-U>biOmnicron ðª
inoremap <C-U>biPi ð«
inoremap <C-U>biRho ð¬
inoremap <C-U>biSigma ð®
inoremap <C-U>biTau ð¯
inoremap <C-U>biUpsilon ð°
inoremap <C-U>biPhi ð±
inoremap <C-U>biChi ð²
inoremap <C-U>biPsi ð³
inoremap <C-U>biOmega ð´
inoremap <C-U>biNabla ðµ
inoremap <C-U>bialpha ð¶
inoremap <C-U>bibeta ð·
inoremap <C-U>bigamma ð¸
inoremap <C-U>bidelta ð¹
inoremap <C-U>biepsilon ðº
inoremap <C-U>bizeta ð»
inoremap <C-U>bieta ð¼
inoremap <C-U>bitheta ð½
inoremap <C-U>biiota ð¾
inoremap <C-U>bikappa ð¿
inoremap <C-U>bilambda ð
inoremap <C-U>bimu ð
inoremap <C-U>binu ð
inoremap <C-U>bixi ð
inoremap <C-U>biomnicron ð
inoremap <C-U>bipi ð
inoremap <C-U>birho ð
inoremap <C-U>bifsigma ð
inoremap <C-U>bisigma ð
inoremap <C-U>bitau ð
inoremap <C-U>biupsilon ð
inoremap <C-U>biphi ð
inoremap <C-U>bichi ð
inoremap <C-U>bipsi ð
inoremap <C-U>biomega ð
inoremap <C-U>bipdiff ð

" ð ð ð ð ð ð ð ð ð ð
" ð ð ð ð ð ð ð ð ð  ð¡

inoremap <C-U>b0 ð
inoremap <C-U>b1 ð
inoremap <C-U>b2 ð
inoremap <C-U>b3 ð
inoremap <C-U>b4 ð
inoremap <C-U>b5 ð
inoremap <C-U>b6 ð
inoremap <C-U>b7 ð
inoremap <C-U>b8 ð
inoremap <C-U>b9 ð
inoremap <C-U>[0 ð
inoremap <C-U>[1 ð
inoremap <C-U>[2 ð
inoremap <C-U>[3 ð
inoremap <C-U>[4 ð
inoremap <C-U>[5 ð
inoremap <C-U>[6 ð
inoremap <C-U>[7 ð
inoremap <C-U>[8 ð 
inoremap <C-U>[9 ð¡

"       â¼  Suppl. Arrows-C
" U+1F800  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð 
" U+1F810  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð 
" U+1F820  ð   ð ¡ ð ¢ ð £ ð ¤ ð ¥ ð ¦ ð § ð ¨ ð © ð ª ð « ð ¬ ð ­ ð ® ð ¯
" U+1F830  ð ° ð ± ð ² ð ³ ð ´ ð µ ð ¶ ð · ð ¸ ð ¹ ð º ð » ð ¼ ð ½ ð ¾ ð ¿
" U+1F840  ð¡ ð¡ ð¡ ð¡ ð¡ ð¡ ð¡ ð¡
" U+1F850  ð¡ ð¡ ð¡ ð¡ ð¡ ð¡ ð¡
" U+1F860  ð¡  ð¡¡ ð¡¢ ð¡£ ð¡¤ ð¡§ ð¡¨ ð¡© ð¡ª ð¡« ð¡¬ ð¡¯
" U+1F870  ð¡° ð¡± ð¡² ð¡³ ð¡´ ð¡· ð¡¸ ð¡¹ ð¡º ð¡» ð¡¼ ð¡¿
" U+1F880  ð¢ ð¢ ð¢ ð¢ ð¢ ð¢
" U+1F890  ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢
" U+1F8A0  ð¢  ð¢¡ ð¢¢ ð¢£ ð¢¤ ð¢¥ ð¢¦ ð¢§ ð¢¨ ð¢© ð¢ª ð¢«
